<head>
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-1T4FCX4DFN"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-1T4FCX4DFN');
  </script>

  <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1'>
  <title>SLAV-Seq data browser</title>
  <!-- <link type='text/css' rel='stylesheet' href='browser/css/navbar.css' /> -->

  <meta charset="utf-8">
  <script src="annoj_cndd/js/fontawesome.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
  <link rel="stylesheet" href="annoj_cndd/css/bootstrap-select.css">

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
  <script src="annoj_cndd/js/bootstrap-select.js"></script>
  <script type='text/javascript' src='annoj_cndd/js/html2canvas.min.js'></script>

  <style type="text/css">
    select.selectpicker {
      display: none;
    }

    /* Prevent FOUC }*/

    div {
      text-align: center;
    }

    .div1 {
      float: left;
      padding: 8px 8px 8px 32px;
    }

    .nav-item {
      margin: 5;
    }
  </style>

  <?php
  include './loadCsv.php';
  loadCsv('donors_IGVconfig.csv', 'donors_tissues');
  loadCsv('slavseq_metadata.csv', 'cells');
  ?>

  <script type="text/javascript">
    function updateTracks() {
      var donor = document.getElementById('select_donor').value;
      if (donor == 'All') {
        document.getElementById('select_cells_li').style.display = 'none';
      }
      else {
        document.getElementById('select_cells_li').style.display = 'block';
      }
    }

    function updateCells() {
      var donor = document.getElementById('select_donor').value;
      var tissues = $('#select_tissue').val();
      var cellsu = cells.filter((x) => (x.donor == donor) & (tissues.includes(x.tissue)) & (x.is_bulk == 'False'))
      for (const selector of ['pileup', 'bam']) {
        $("#select_cells_" + selector).empty();
        for (const cell of cellsu) {
          var option = document.createElement("option");
          option.text = 'D' + cell.donor + ' ' + cell.tissue + ': ' + cell.sample;
          option.value = cell.sample;
          option.selected = selector == 'pileup';
          document.getElementById('select_cells_' + selector).add(option)
        }
      }
      $('.selectpicker').selectpicker('refresh');
    }

    function allDonorsTracks() {
      // Create a pileup track for each donor/tissue
      var myTracks = []
      var tissues = $('#select_tissue').val();
      for (const donor of donors_tissues.filter((x) => tissues.includes(x.tissue))) {
        var myTrack = {
          'name': "Donor" + donor.donor + ' ' + donor.tissue,
          'url': donor.url,
          'format': 'bigwig',
          'type': 'wig',
          'windowFunction': 'max',
          'autoscale': false,
          'min': 0, 'max': 20,
          'height': 20,
          'color': donor.tissue == "HIP" ? "rgb(0,204,255)" : "rgb(0,0,255)",
          'visible': false,
          'order': 2 + donor.index / 100,
          'roi': [{
            name: donor.donor + ' non-reference germline L1 insertions (KNRGL called by Megane)',
            url: "./rois/KNRGL_Donor" + donor.donor + "_megane.bed",
            color: "rgba(1,94,255,0.25)"
          }],
          'overflowColor': "rgb(100,100,100)"
        };
        myTracks.push(myTrack)
      }
      igv.browser.loadTrackList(myTracks)
      // igv.browser.sampleInfo = donors_tissues;
    }

    function getLink() {
      var blob = igv.browser.compressedSession();
      src = 'https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/IGV/?sessionURL=blob:' + blob
      document.getElementById('srcBox').value = src;
      window.history.pushState("object or string", "", src);
    }

    function copyLink() {
      // Copy link to the current state to the clipboard

      /* Select the text field */
      var copySrc = document.getElementById('srcBox')
      copySrc.style.visibility = 'visible'; // The box must be visible to copy
      copySrc.select();
      copySrc.setSelectionRange(0, 99999); /*For mobile devices*/

      /* Copy the text inside the text field */
      document.execCommand("copy");
      copySrc.style.visibility = 'hidden';
    }

    function updateIGV() {
      for (const track of (igv.browser.tracks.filter((x) => ['wig', 'alignment'].includes(x.type)))) {
        igv.browser.removeTrack(track);
      }

      // Add pileup tracks (bigwig)
      if ($("#select_donor").val() == 'All') {
        allDonorsTracks();
      } else {
        var cells_show = $("#select_cells_pileup").val();
        var cells_info = cells.filter((x) => (cells_show.includes(x.sample)) & (x.is_bulk == 'False'))
        var trackHeight = document.getElementById('pileup_height').value;
        var myTracks = []
        for (const cell_info of cells_info) {
          var myTrack = {
            'name': "Donor" + cell_info.donor + ' ' + cell_info.tissue + ':' + cell_info.sample,
            'url': 'https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/allsamples/SingleCells/pileups_q30_bothstrands/' + cell_info.sample + '.tagged.sorted.R1_discordant.q30.sorted.bigwig',
            'format': 'bigwig',
            'type': 'wig',
            'windowFunction': 'max',
            'autoscale': false,
            'min': 0, 'max': 20,
            'height': trackHeight,
            'color': cell_info.tissue == "HIP" ? "rgb(0,204,255)" : "rgb(0,0,255)",
            'visible': false,
            'order': 3
          };
          // igv.browser.loadTrack(myTrack)
          myTracks.push(myTrack)
        }
        igv.browser.loadTrackList(myTracks)

        // Add bam tracks
        var cells_show = $("#select_cells_bam").val();
        var cells_info = cells.filter((x) => cells_show.includes(x.sample))
        var myTracks = []
        for (const cell_info of cells_info) {
          var myTrack = {
            'name': "Donor" + cell_info.donor + ' ' + cell_info.tissue + ':' + cell_info.sample,
            'url': 'https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/allsamples/SingleCells/bam/' + cell_info.sample + '.tagged.sorted.bam',
            'indexURL': 'https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/allsamples/SingleCells/bam/' + cell_info.sample + '.tagged.sorted.bam.bai',
            'format': 'bam',
            'type': 'alignment',
            'height': 300,
            'coverageColor': cell_info.tissue == "HIP" ? "rgb(0,204,255)" : "rgb(0,0,255)",
            'showSoftClips': true,
            'showCoverage': false,
            'displayMode': 'squished',
            'viewAsPairs': false,
            'visible': false,
            'visibilityWindow': 3000000,
            'maxTLEN': 10000,
            'order': 4
          };
          // igv.browser.loadTrack(myTrack)
          myTracks.push(myTrack)
        }
        igv.browser.loadTrackList(myTracks)
      }
    }

  </script>

</head>

<body id="top">
  <nav class="navbar navbar-default" style="margin:0;">
    <div class="container-fluid">
      <ul class="nav navbar-nav">
        <li class="nav-item">
          <span class="glyphicon glyphicon-chevron-down" data-toggle="collapse" href="#topbar" title="Show/hide options"
            style="line-height: inherit; font-size:18;"></span>
        </li>
        <li class="nav-item">
          <button onclick="myScreenshot();" class="btn btn-primary">
            <i class="fa fa-camera"></i> Save screenshot</button>
        </li>
        <li class="nav-item">
          <button onclick="getLink(); copyLink();" class="btn btn-primary">
            <i class="fa fa-link" aria-hidden="true"></i> Copy shareable link</button>
          <input type="text" id="srcBox" size="1" style="visibility:hidden;"></input>
        </li>
      </ul>
    </div>

    <div class="collapse in" id="topbar">
      <div class="container-fluid">
        <ul class="nav navbar-nav">
          <li class="nav-item donor-selection">
            <select id="select_donor" class="selectpicker" onchange="updateCells(); updateTracks(); updateIGV(); "
              data-width="auto" data-toggle="tooltip" data-placement="top" data-header="Donor to show"
              data-actions-box="true">
              <option value="All" selected> All donors</option>
            </select>
          </li>

          <li class="nav-item cell-selection" id="select_cells_li">

            <select id="select_cells_pileup" class="selectpicker" multiple data-width="auto" title="Cell pileups"
              onchange="updateTracks(); updateIGV(); " data-toggle="tooltip" data-placement="top"
              data-live-search="true" data-header="Cells to show" data-actions-box="true"
              data-selected-text-format="count">
              <option value="All" selected> All cells</option>
            </select>
            <label>Pileup track height:</label>
            <input class="selectpicker" id="pileup_height" value="20" onchange="updateIGV(); " style="width:50px; ">
            <select id="select_cells_bam" class="selectpicker" onchange="updateTracks(); updateIGV(); " multiple
              data-width="auto" data-live-search="true" title="Cell BAMs" data-toggle="tooltip" data-placement="top"
              data-header="Cells to show" data-actions-box="true" data-selected-text-format="count">
              <option value="All" selected> All cells</option>
            </select>
          </li>

          <li class="nav-item tissue-selection">
            <select id="select_tissue" class="selectpicker" onchange="updateCells(); updateTracks(); updateIGV(); "
              data-width="auto" multiple data-toggle="tooltip" data-placement="top">
              <option value="HIP" selected> Hippocampus</option>
              <option value="DLPFC" selected> Dorsolateral pre-frontal cortex</option>
            </select>
          </li>
          <!-- 
          <li class="nav-item">
            <p>
              <button onclick="myRefresh(); getLink();" class="btn btn-primary">Reload browser</button>
            </p>
          </li> -->

        </ul>
      </div>
    </div>

  </nav>


  <div id="igv-div" width="100%">

  </div>

  <script src="./igv.js/dist/igv.min.js" type="text/javascript"> </script>
  <script type="text/javascript">

    var igvDiv = document.getElementById("igv-div");
    var options =
    {
      genome: "hs1",
      queryParametersSupported: true,
      locus: "chr5:158952443-158981301",
      reference: {
        "id": "hs1",
        "blatDB": "hub_3671779_hs1",
        "name": "Human (T2T CHM13-v2.0/hs1)",
        "fastaURL": "https://s3.amazonaws.com/igv.org.genomes/chm13v2.0/chm13v2.0.fa",
        "indexURL": "https://s3.amazonaws.com/igv.org.genomes/chm13v2.0/chm13v2.0.fa.fai",
        "cytobandURL": "https://s3.amazonaws.com/igv.org.genomes/chm13v2.0/CHM13_v2.0.cytoBandMapped.bed",
        "aliasURL": "https://hgdownload.soe.ucsc.edu/goldenPath/hs1/bigZips/hs1.chromAlias.txt",
        "twoBitURL": "https://hgdownload.soe.ucsc.edu/goldenPath/hs1/bigZips/hs1.2bit",
        "twoBitBptURL": "https://hgdownload.soe.ucsc.edu/goldenPath/hs1/bigZips/hs1.2bit.bpt"
      },
      tracks: [
        {
          "name": "Genes",
          "format": "bed",
          "url": "https://s3.amazonaws.com/igv.org.genomes/chm13v2.0/chm13v2.0_geneLocations.short.bed.gz",
          "hidden": false,
          "searchable": true,
          "order": 0,
          "type": "annotation",
          "height": 5
        },
        {
          "id": "catLiftOffGenesV1",
          "name": "CAT/Liftoff Genes",
          "format": "bigbed",
          "description": " <a target = \"_blank\" href = \"https://hgdownload.soe.ucsc.edu/hubs/GCA/009/914/755/GCA_009914755.4/html/GCA_009914755.4_T2T-CHM13v2.0.catLiftOffGenesV1.html\">CAT + Liftoff Gene Annotations</a>",
          "url": "https://hgdownload.soe.ucsc.edu/hubs/GCA/009/914/755/GCA_009914755.4/bbi/GCA_009914755.4_T2T-CHM13v2.0.catLiftOffGenesV1/catLiftOffGenesV1.bb",
          // "displayMode": "EXPANDED",
          "height": 100,
          "visibilityWindow": -1,
          "supportsWholeGenome": false,
          "order": 0.1,
          "type": "annotation",
          "displayMode": 'squish'
        },
        {
          'name': "RepeatMasker",
          'format': "bigbed",
          'type': 'annotation',
          'sourceType': "file",
          'displayMode': "expanded",
          'url': "https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/allsamples/chm13v2.0.XY.fasta.all_rmsk.bb",
          'order': 0.5,
        },
        {
          'name': "KNRGL calls by Megane",
          'format': "bed",
          'sourceType': "file",
          'url': "https://brainome.ucsd.edu/emukamel/SLAVSeq_SZ/allsamples/megane_knrgl/KNRGL_alldonors_megane.merged.bed",
          'order': 1,
        }
      ],
      roi: [
        {
          name: 'Peaks detected in any cell (±20kb)',
          url: './rois/allcells_max_q30.filtered.ForIGV.bed',
          indexed: false,
          color: "rgba(94,255,1,0.25)"
        },
        {
          name: 'Non-reference germline L1 insertions (KNRGL called by Megane)',
          url: "./rois/KNRGL_alldonors_megane.merged.bed",
          indexed: false,
          color: "rgba(255,255,255,0)",
          visible: false,
        }
      ]
    };

    // Add tracks for each donor
    xxBrowser =igv.createBrowser(igvDiv, options)
      .then(function (browser) {
        igv.browser = browser
      })
      .then(function (browser) {
        updateTracks();
        updateCells();
        updateIGV();
      })
      .then(function (browser) {
        console.log("Browser ready")
      })

  </script>

  <script>
    // Update the select menus
    const donorMenu = document.getElementById('select_donor');
    const donors = donors_tissues.filter((d) => d.tissue == "HIP")
    for (const donor of donors) {
      var option = document.createElement("option");
      option.text = "Donor " + donor.donor;
      option.title = "D" + donor.donor;
      option.value = donor.donor;
      donorMenu.add(option);
    }
  </script>
</body>

</html>